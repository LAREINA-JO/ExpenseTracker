// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String        @unique @db.VarChar(50)
  email                String        @unique
  password             String
  refreshToken         String?
  refreshTokenExpireAt DateTime?
  Accounts             Account[]
  Category             Category[]
  Transaction          Transaction[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@map("user")
}

model Account {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(50)
  cardNumber  String        @unique
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, name])
  @@map("account")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  Transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()

  @@unique([userId, name])
  @@map("category")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  transactionDate DateTime
  amount          Float
  description     String?
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transaction")
}
